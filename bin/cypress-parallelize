#!/usr/bin/env node

require = require('esm')(module /*, options*/);

const scope  = require('../src/scope')
const { removeReportFolders, removeRunnerLogFolder, cleanFeatureFiles} = require("../src/remover");
const fs = require("fs");
const path = require("path");
const {scanFeatureFiles} = require("../src/scanner");
const {assignTestRunnerAnnotation} = require("../src/tagger");
const logger = require('../src/logger')
const {removePendingTests, mergeAllureReport, generateReport} = require("../src/allure-handler");
const {error} = require("../src/logger");
require('../src/arguments-parser').parseArgumentsIntoOptions(process.argv).then(r => {

    logger.log(`Cypress Parallelize Version: ${require('../package.json').version}`);
    //show version info?
    if( scope.options.version )
        logger.log(`Cypress Parallelize Version: ${require('../package.json').version}`);
    else if( scope.options.help ) //show help screen?
        require('../src/helper').showHelp().then(r => { logger.log(r)});
    else {
        if(scope.options.allure) {
            //if allure is enabled and the folders should be cleaned first
            if (scope.options.cleanAllureReports) {
                removeReportFolders();
            }
        }

        if ( scope.options.runnerLog ) {
            logger.log("Check for log folder");
            //check if the path exists, if not create it
            const logFolderPath = path.join(process.cwd(), scope.options.runnerLogFolderName);
            if (!fs.existsSync(logFolderPath)) {
                logger.log("Log folder does not exist, creating it now");
                fs.mkdirSync(logFolderPath);
            }

            //should runner logs be removed?
            if ( scope.options.cleanRunnerLogs ) {
                logger.log("Cleaning runner logs now")
                removeRunnerLogFolder( logFolderPath );
            }
        }

        scanFeatureFiles(path.join(process.cwd(),scope.options.featureFolder)); //scan the feature folder for feature files
        cleanFeatureFiles(); //clean the found feature files from previous runner annotations (only works with the default annotation or if the custom annotation is the same as before
        assignTestRunnerAnnotation(); //assign the test runner annotation for this run

        let arrayOfPromises =require('../src/command-executor').executeCommandXTimes();
        Promise.all(arrayOfPromises)
        .catch((error) => {
            logger.error("Process Terminated with error : "+error);
            return arrayOfPromises;
        })
        .then((results) => {
            logger.log("All Promises are done!");
            if (scope.options.allure) {
                if (scope.options.allureRemovePendingTests)
                    removePendingTests(); //remove the skipped tests from each runner so there is no crazy overload of skipped tests/scenarios
                if (scope.options.allureMergeRunnerReports)
                    mergeAllureReport();
                if (scope.options.allureGenerateReport)
                    generateReport(); //generate the report as a sum
            }
            cleanFeatureFiles(); //clean the found feature files from previous runner annotations (only works with the default annotation or if the custom annotation is the same as before
        });
    }
});